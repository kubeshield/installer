/*
Copyright The Kubeshield Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubeshield.dev.installer.apis.installer.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message HealthcheckSpec {
  // +optional
  optional bool enabled = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=identityservers,singular=kubeshieldoperator,categories={kubeshield,appscode}
message IdentityServer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional IdentityServerSpec spec = 2;
}

// IdentityServerList is a list of IdentityServers
message IdentityServerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of IdentityServer CRD objects
  repeated IdentityServer items = 2;
}

// IdentityServerSpec is the spec for redis version
message IdentityServerSpec {
  optional int32 replicaCount = 1;

  optional ImageRef server = 2;

  optional string imagePullPolicy = 3;

  // +optional
  repeated string imagePullSecrets = 4;

  // +optional
  optional bool criticalAddon = 5;

  // +optional
  optional int32 logLevel = 6;

  // +optional
  map<string, string> annotations = 7;

  // +optional
  map<string, string> nodeSelector = 8;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 9;

  // If specified, the pod's scheduling constraints
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 10;

  // Compute Resources required by the sidecar container.
  // +optional
  optional k8s.io.api.core.v1.ResourceRequirements resources = 11;

  optional ServiceAccountSpec serviceAccount = 12;

  optional WebHookSpec apiserver = 13;

  // +optional
  optional bool enableAnalytics = 14;

  optional Monitoring monitoring = 15;
}

message ImageRef {
  optional string registry = 1;

  optional string repository = 2;

  optional string tag = 3;
}

message Monitoring {
  optional string agent = 1;

  // +optional
  optional bool operator = 2;

  optional PrometheusSpec prometheus = 3;

  optional ServiceMonitorLabels serviceMonitor = 4;
}

message PrometheusSpec {
  // +optional
  optional string namespace = 1;
}

message ServiceAccountSpec {
  optional bool create = 1;

  // +optional
  optional string name = 2;
}

message ServiceMonitorLabels {
  // +optional
  map<string, string> labels = 1;
}

message ServingCerts {
  optional bool generate = 1;

  // +optional
  optional string caCrt = 2;

  // +optional
  optional string serverCrt = 3;

  // +optional
  optional string serverKey = 4;
}

message WebHookSpec {
  optional int32 groupPriorityMinimum = 1;

  optional int32 versionPriority = 2;

  optional bool useKubeapiserverFqdnForAks = 3;

  optional HealthcheckSpec healthcheck = 4;

  optional ServingCerts servingCerts = 5;
}

